% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polygonChooser.R
\name{polygonChooserUI}
\alias{polygonChooserUI}
\alias{polygonChooser}
\title{Shiny module for selecting a polygon to display an a map}
\usage{
polygonChooserUI(id)

polygonChooser(
  input,
  output,
  session,
  rctPolygonList,
  selectedPoly = NULL,
  uploadOpts = list(auth = NULL, path = NULL, user = NULL),
  studyArea = NULL
)
}
\arguments{
\item{id}{An id string that corresponds with the id used to call the module's UI function.}

\item{input}{shiny server input object}

\item{output}{shiny server output object}

\item{session}{shiny server session object}

\item{rctPolygonList}{A reactive nested list with the following structure:
# TODO: fill this in}

\item{selectedPoly}{The name of the polygon to select by default.}

\item{uploadOpts}{A list of options for use with file uploads:
\code{auth} logical indicating whether user is authorized to upload;
\code{path} a directory path to use for file uploads;
\code{user} the current username (used for creating user-specific paths);
The default for all options is \code{NULL}, which means do not use.}

\item{studyArea}{A \code{Spatial} object used as a template for post-processing
the uploaded polygon, which is cropped, reprojected, etc.
to match \code{studyArea}. See \code{\link[reproducible]{postProcess}}.}
}
\value{
A reactive list with elements \code{polygons} (a list of polygons) and
        \code{selected} (the name of the selected polygon).
}
\description{
Provides a dropdown list of polygons available for mapping, sorted alphabetically.
}
\examples{
\dontrun{
if require(SpaDES.tools) {
  library(leaflet)
  library(magrittr)
  library(shiny)
  library(sp)

  shinyApp(
    ui = fluidPage(
      htmlOutput("infobox"),
      leafletOutput("map"),
      polygonChooserUI("polyPicker")
    ),
    server = function(input, output, session) {
      dummyPoly <- function() {
        randomPolygon(matrix(c(-120, 60), ncol = 2), 100)
      }
      dummyPoly1 <- dummyPoly()
      dummyPoly2 <- dummyPoly()
      dummyPoly3 <- dummyPoly()
      dummyPoly4 <- dummyPoly()

      tmpf <- tempfile(fileext = ".shp")
      raster::shapefile(dummyPoly4, filename = tmpf)

      polygonList <- reactive(list(
        caribou = dummyPoly1,
        ecozones = dummyPoly2,
        fmu = dummyPoly3
      ))
      out <- callModule(polygonChooser, "polyPicker", polygonList, "ecozones",
                        uploadOpts = list(
                          auth = TRUE,
                          path = dirname(tmpf),
                          user = "username"
                        ))

      updatedPolygonList <- reactive(out()$polygons)
      chosenPolyName <- reactive(out()$selected)
      chosenPoly <- reactive(updatedPolygonList()[[chosenPolyName()]])

      output$infobox <- renderUI({
        fluidRow(
          h4("Currently viewing the ", chosenPolyName(), " polygon.")
        )
      })

      output$map <- renderLeaflet({
        leaflet() \%>\%
          addTiles() \%>\%
          addPolygons(data = spTransform(chosenPoly(), CRSobj = proj4stringLFLT))
      })
    }
  )
}
}

}
\author{
Alex Chubaty
}
